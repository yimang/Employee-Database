/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.employeedatabase;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 * Graphical user interface for the employee database
 *
 * @author Yi Mang Yang
 * @author Max Xiong
 * @version 2.0 Dec 19, 2014.
 */
public class EmployeeDatabaseUI extends javax.swing.JFrame {

    public HashTable myHashTable;
    public InputOutput streams;
    public int tempx;
    public int tempy;

    /**
     * Creates new form EmployeeDatabaseUI
     */
    public EmployeeDatabaseUI() {
        initComponents();
        myHashTable = new HashTable();
        displayFullTimeFields();
        streams = new InputOutput();
        streams.loadData(myHashTable);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        empNumberLabel = new javax.swing.JLabel();
        empNumberTextField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        middleNameLabel = new javax.swing.JLabel();
        middleNameTextField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        deductionsRateLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        deductionsRateTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        viewTableButton = new javax.swing.JButton();
        empTypeComboBox = new javax.swing.JComboBox();
        annualSalaryTextField = new javax.swing.JTextField();
        hourlyWageLabel = new javax.swing.JLabel();
        annualSalaryLabel = new javax.swing.JLabel();
        hourlyWageTextField = new javax.swing.JTextField();
        hrsPerWeekLabel = new javax.swing.JLabel();
        hrsPerWeekTextField = new javax.swing.JTextField();
        weeksPerYearLabel = new javax.swing.JLabel();
        weeksPerYearTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        empDatabaseTable = new javax.swing.JTable();
        sexComboBox = new javax.swing.JComboBox();
        searchEmpLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchEmpTextField = new javax.swing.JTextField();
        modifyButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                saveRequest(evt);
            }
        });

        empNumberLabel.setText("Employee Number");

        firstNameLabel.setText("First Name");

        middleNameLabel.setText("Middle Name");

        lastNameLabel.setText("Last Name");

        deductionsRateLabel.setText("Deductions Rate (%)");

        addButton.setText("Add");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addEmployee(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveToFile(evt);
            }
        });

        viewTableButton.setText("View Table");
        viewTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewTable(evt);
            }
        });

        empTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full Time", "Part Time" }));
        empTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                empTypeComboBoxItemStateChanged(evt);
            }
        });

        hourlyWageLabel.setText("Hourly Wage ($)");

        annualSalaryLabel.setText("Annual Salary ($)");

        hrsPerWeekLabel.setText("Hours Per Week");

        weeksPerYearLabel.setText("Weeks Per Year");

        empDatabaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(empDatabaseTable);

        sexComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        searchEmpLabel.setText("Search Employee Number");

        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchEmployee(evt);
            }
        });

        modifyButton.setText("Modify");
        modifyButton.setEnabled(false);
        modifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modifyEmployee(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeEmployee(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hrsPerWeekLabel)
                                    .addComponent(hourlyWageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lastNameLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weeksPerYearLabel)
                                    .addComponent(hrsPerWeekTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(deductionsRateLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(deductionsRateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(empNumberLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(empNumberTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(weeksPerYearTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                        .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                                .addComponent(firstNameLabel)
                                                .addComponent(middleNameLabel))
                                            .addGap(18, 18, 18))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(sexComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGap(18, 18, 18)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(annualSalaryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                        .addComponent(annualSalaryLabel)
                                        .addComponent(hourlyWageLabel)
                                        .addComponent(empTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addComponent(searchEmpLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(searchEmpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(viewTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(empNumberLabel)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(empNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(empTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(annualSalaryLabel)
                            .addComponent(firstNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annualSalaryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(middleNameLabel)
                            .addComponent(hourlyWageLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hourlyWageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameLabel)
                            .addComponent(hrsPerWeekLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hrsPerWeekTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weeksPerYearLabel)
                            .addComponent(deductionsRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deductionsRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weeksPerYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(saveButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modifyButton)
                            .addComponent(removeButton))
                        .addGap(40, 40, 40)
                        .addComponent(searchEmpLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchEmpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewTableButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Changes the labels and text fields that appear in the GUI depending on if
     * part time or full time is selected in the combo box.
     */
    private void empTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_empTypeComboBoxItemStateChanged
        if (empTypeComboBox.getSelectedItem().toString().equals("Full Time")) { //only display info for full time employee           
            displayFullTimeFields();
        } else if (empTypeComboBox.getSelectedItem().toString().equals("Part Time")) { //only display info for part time employee
            displayPartTimeFields();
        }
    }//GEN-LAST:event_empTypeComboBoxItemStateChanged

    private void displayPartTimeFields() {
        annualSalaryTextField.setVisible(false);
        hourlyWageTextField.setVisible(true);
        hrsPerWeekTextField.setVisible(true);
        weeksPerYearTextField.setVisible(true);
        annualSalaryLabel.setVisible(false);
        hourlyWageLabel.setVisible(true);
        hrsPerWeekLabel.setVisible(true);
        weeksPerYearLabel.setVisible(true);
    }

    private void displayFullTimeFields() {
        annualSalaryLabel.setVisible(true);
        annualSalaryTextField.setVisible(true);
        hourlyWageLabel.setVisible(false);
        hrsPerWeekLabel.setVisible(false);
        weeksPerYearLabel.setVisible(false);
        hourlyWageTextField.setVisible(false);
        hrsPerWeekTextField.setVisible(false);
        weeksPerYearTextField.setVisible(false);
    }

    /**
     * Adds an employee with the entered information into the hash table.
     */
    private void addEmployee(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEmployee
        if (empTypeComboBox.getSelectedItem().toString().equals("Full Time")) { //for full time employee
            FullTimeEmployee employee = new FullTimeEmployee(Integer.parseInt(empNumberTextField.getText()), sexComboBox.getSelectedItem().toString().charAt(0), firstNameTextField.getText(), middleNameTextField.getText(), lastNameTextField.getText(), Float.parseFloat(deductionsRateTextField.getText()), Float.parseFloat(annualSalaryTextField.getText()));
            myHashTable.addToTable(employee); //add full time employee to hash table
            JOptionPane.showMessageDialog(null, "Employee Added", "Notice", JOptionPane.INFORMATION_MESSAGE);
            empTypeComboBox.setSelectedIndex(0);
            sexComboBox.setSelectedIndex(0);
            clearFields();
        } else if (empTypeComboBox.getSelectedItem().toString().equals("Part Time")) { //for part time employee
            PartTimeEmployee employee = new PartTimeEmployee(Integer.parseInt(empNumberTextField.getText()), sexComboBox.getSelectedItem().toString().charAt(0), firstNameTextField.getText(), middleNameTextField.getText(), lastNameTextField.getText(), Float.parseFloat(deductionsRateTextField.getText()), Float.parseFloat(hourlyWageTextField.getText()), Float.parseFloat(hrsPerWeekTextField.getText()), Float.parseFloat(weeksPerYearTextField.getText()));
            myHashTable.addToTable(employee); //add part time employee to hash table
            JOptionPane.showMessageDialog(null, "Employee Added", "Notice", JOptionPane.INFORMATION_MESSAGE);
            empTypeComboBox.setSelectedIndex(0);
            sexComboBox.setSelectedIndex(0);
            clearFields();
        }
    }//GEN-LAST:event_addEmployee

    /**
     * Saves the employees data from the hash table in a text file.
     */
    private void saveToFile(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveToFile
        streams.saveData(myHashTable);
        JOptionPane.showMessageDialog(null, "Data Saved", "Notice", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveToFile

    /**
     * Displays some of the information for the employees stored in the hash
     * table in the GUI's display table.
     */
    private void viewTable(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewTable
        DefaultTableModel dtm = new DefaultTableModel(myHashTable.numItems, 6);
        Object[] identifiers = {"Employee #", "Sex", "First Name", "Middle Name", "Last Name", "Type", "Net Income ($)"};
        dtm.setColumnIdentifiers(identifiers); //sets column headings
        empDatabaseTable.setModel(dtm);
        int temp = 0;
        for (int i = 0; i < 2; i++) { //displays employees' info in hash table using loops
            for (int j = 0; j < myHashTable.hashTable[i].size(); j++) {
                dtm.setValueAt(myHashTable.hashTable[i].get(j).empNumber, temp, 0);
                dtm.setValueAt(myHashTable.hashTable[i].get(j).sex, temp, 1);
                dtm.setValueAt(myHashTable.hashTable[i].get(j).firstName, temp, 2);
                dtm.setValueAt(myHashTable.hashTable[i].get(j).middleName, temp, 3);
                dtm.setValueAt(myHashTable.hashTable[i].get(j).lastName, temp, 4);
                dtm.setValueAt(myHashTable.hashTable[i].get(j).getClassName().substring(0, 4) + " " + myHashTable.hashTable[i].get(j).getClassName().substring(4, 8), temp, 5);
                if (myHashTable.hashTable[i].get(j).getClassName().equals("FullTimeEmployee")) {
                    dtm.setValueAt(myHashTable.hashTable[i].get(j).getAnnualSalary() * ((100 - myHashTable.hashTable[i].get(j).deductionsRate) / 100), temp, 6);
                } else {
                    dtm.setValueAt(myHashTable.hashTable[i].get(j).getHourlyWage() * myHashTable.hashTable[i].get(j).getHrsPerWeek() * myHashTable.hashTable[i].get(j).getWeeksPerYear() * ((100 - myHashTable.hashTable[i].get(j).deductionsRate) / 100), temp, 6);
                }
                temp++;

            }
        }
    }//GEN-LAST:event_viewTable

    /**
     * Searches for an existing employee in the hash table and displays his or
     * her information in the text fields. Allows the option for the user to
     * modify the employee's information or delete the employee altogether.
     */
    private void searchEmployee(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchEmployee
        boolean check = false;
        outerloop:
        for (int i = 0; i < 2; i++) { //searches through hash table 
            for (int j = 0; j < myHashTable.hashTable[i].size(); j++) {
                if (myHashTable.hashTable[i].get(j).empNumber == Integer.parseInt(searchEmpTextField.getText())) { //when the employee number is found
                    tempx = i; //tempx and tempy store the location of the found employee in the hash table, so it can be used in modifyEmployee and removeEmployee
                    tempy = j;
                    empNumberTextField.setText(String.valueOf(myHashTable.hashTable[i].get(j).empNumber)); //sets common text fields with employee info
                    firstNameTextField.setText(myHashTable.hashTable[i].get(j).firstName);
                    middleNameTextField.setText(myHashTable.hashTable[i].get(j).middleName);
                    lastNameTextField.setText(myHashTable.hashTable[i].get(j).lastName);
                    deductionsRateTextField.setText(String.valueOf(myHashTable.hashTable[i].get(j).deductionsRate));
                    if (myHashTable.hashTable[i].get(j).getClassName().equals("PartTimeEmployee")) {
                        PartTimeEmployee pEmployee = (PartTimeEmployee) myHashTable.hashTable[i].get(j);
                        hourlyWageTextField.setText(String.valueOf(pEmployee.hourlyWage)); //sets text fields particular to part time employee 
                        hrsPerWeekTextField.setText(String.valueOf(pEmployee.hrsPerWeek));
                        weeksPerYearTextField.setText(String.valueOf(pEmployee.weeksPerYear));
                        displayPartTimeFields();
                        empTypeComboBox.setSelectedIndex(1);
                    } else {
                        FullTimeEmployee fEmployee = (FullTimeEmployee) myHashTable.hashTable[i].get(j);
                        annualSalaryTextField.setText(String.valueOf(fEmployee.annualSalary)); //sets text field particular to full time employee
                    }
                    JOptionPane.showMessageDialog(null, "Employee Found", "Notice", JOptionPane.INFORMATION_MESSAGE);
                    searchEmpTextField.setText("");
                    modifyButton.setEnabled(true);
                    removeButton.setEnabled(true);
                    addButton.setEnabled (false);                  
                    check = true;
                    break outerloop; //break loop when employee is found
                }
            }
        }
        if (check == false) {
            JOptionPane.showMessageDialog(null, "Employee Not Found", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchEmployee

    /**
     * Modifies the information for an employee after the employee is found.
     */
    private void modifyEmployee(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyEmployee
        if (myHashTable.hashTable[tempx].get(tempy).getClassName().equals("PartTimeEmployee")) { //add new part time employee
            myHashTable.hashTable[tempx].add(tempy, new PartTimeEmployee(Integer.parseInt(empNumberTextField.getText()), sexComboBox.getSelectedItem().toString().charAt(0), firstNameTextField.getText(), middleNameTextField.getText(), lastNameTextField.getText(), Float.parseFloat(deductionsRateTextField.getText()), Float.parseFloat(hourlyWageTextField.getText()), Float.parseFloat(hrsPerWeekTextField.getText()), Float.parseFloat(weeksPerYearTextField.getText())));
        } else { //add new full time employee
            myHashTable.hashTable[tempx].add(tempy, new FullTimeEmployee(Integer.parseInt(empNumberTextField.getText()), sexComboBox.getSelectedItem().toString().charAt(0), firstNameTextField.getText(), middleNameTextField.getText(), lastNameTextField.getText(), Float.parseFloat(deductionsRateTextField.getText()), Float.parseFloat(annualSalaryTextField.getText())));
        }
        myHashTable.hashTable[tempx].remove(tempy + 1); //remove old employee 
        empTypeComboBox.setSelectedIndex(0);
        sexComboBox.setSelectedIndex(0);
        clearFields();
        modifyButton.setEnabled(false);
        removeButton.setEnabled(false);
        addButton.setEnabled(true);
        JOptionPane.showMessageDialog(null, "Employee Information Modified", "Notice", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_modifyEmployee

    /**
     * Removes the employee from the hash table after the employee is found.
     */
    private void removeEmployee(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeEmployee
        myHashTable.hashTable[tempx].remove(tempy); //remove found employee
        empTypeComboBox.setSelectedIndex(0);
        sexComboBox.setSelectedIndex(0);
        clearFields();
        modifyButton.setEnabled(false);
        removeButton.setEnabled(false);
        addButton.setEnabled(true);
        JOptionPane.showMessageDialog(null, "Employee Removed", "Notice", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_removeEmployee

    /**
     * Asks and allows the user to save the employee data in the hash table into
     * a text file when the employee database form is closed.
     */
    private void saveRequest(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_saveRequest
        if (JOptionPane.showConfirmDialog(new JFrame(),
                "Would you like to save all changes?",
                "Exiting Window", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            streams.saveData(myHashTable); //save hash table data in file when yes is clicked
            System.out.println("Should Exit: " + WindowConstants.DISPOSE_ON_CLOSE);
            System.exit(WindowConstants.DISPOSE_ON_CLOSE);
        } else {

            System.out.println("Should Exit: " + WindowConstants.DISPOSE_ON_CLOSE);
            System.exit(WindowConstants.DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_saveRequest

    private void clearFields() {
        empNumberTextField.setText("");
        firstNameTextField.setText("");
        middleNameTextField.setText("");
        lastNameTextField.setText("");
        deductionsRateTextField.setText("");
        annualSalaryTextField.setText("");
        hourlyWageTextField.setText("");
        hrsPerWeekTextField.setText("");
        weeksPerYearTextField.setText("");
        searchEmpTextField.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeDatabaseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeDatabaseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeDatabaseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeDatabaseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeDatabaseUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel annualSalaryLabel;
    private javax.swing.JTextField annualSalaryTextField;
    private javax.swing.JLabel deductionsRateLabel;
    private javax.swing.JTextField deductionsRateTextField;
    private javax.swing.JTable empDatabaseTable;
    private javax.swing.JLabel empNumberLabel;
    private javax.swing.JTextField empNumberTextField;
    private javax.swing.JComboBox empTypeComboBox;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel hourlyWageLabel;
    private javax.swing.JTextField hourlyWageTextField;
    private javax.swing.JLabel hrsPerWeekLabel;
    private javax.swing.JTextField hrsPerWeekTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel middleNameLabel;
    private javax.swing.JTextField middleNameTextField;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchEmpLabel;
    private javax.swing.JTextField searchEmpTextField;
    private javax.swing.JComboBox sexComboBox;
    private javax.swing.JButton viewTableButton;
    private javax.swing.JLabel weeksPerYearLabel;
    private javax.swing.JTextField weeksPerYearTextField;
    // End of variables declaration//GEN-END:variables
}
